package com.yunbiao.armyface_offline.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property CompanyCode = new Property(3, String.class, "companyCode", false, "COMPANY_CODE");
        public final static Property CompanyName = new Property(4, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property DeptCode = new Property(5, String.class, "deptCode", false, "DEPT_CODE");
        public final static Property DeptName = new Property(6, String.class, "deptName", false, "DEPT_NAME");
        public final static Property IcNo = new Property(7, String.class, "icNo", false, "IC_NO");
        public final static Property Icon = new Property(8, String.class, "icon", false, "ICON");
        public final static Property UserStatus = new Property(9, String.class, "userStatus", false, "USER_STATUS");
        public final static Property UpdateTime = new Property(10, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_CODE\" TEXT UNIQUE ," + // 1: userCode
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"COMPANY_CODE\" TEXT," + // 3: companyCode
                "\"COMPANY_NAME\" TEXT," + // 4: companyName
                "\"DEPT_CODE\" TEXT," + // 5: deptCode
                "\"DEPT_NAME\" TEXT," + // 6: deptName
                "\"IC_NO\" TEXT," + // 7: icNo
                "\"ICON\" TEXT," + // 8: icon
                "\"USER_STATUS\" TEXT," + // 9: userStatus
                "\"UPDATE_TIME\" TEXT);"); // 10: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(4, companyCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(5, companyName);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(6, deptCode);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(7, deptName);
        }
 
        String icNo = entity.getIcNo();
        if (icNo != null) {
            stmt.bindString(8, icNo);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(10, userStatus);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String companyCode = entity.getCompanyCode();
        if (companyCode != null) {
            stmt.bindString(4, companyCode);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(5, companyName);
        }
 
        String deptCode = entity.getDeptCode();
        if (deptCode != null) {
            stmt.bindString(6, deptCode);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(7, deptName);
        }
 
        String icNo = entity.getIcNo();
        if (icNo != null) {
            stmt.bindString(8, icNo);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
 
        String userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindString(10, userStatus);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(11, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // companyCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // companyName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deptCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deptName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // icNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // icon
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompanyCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeptCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeptName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIcNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
